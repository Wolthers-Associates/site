name: Deploy Wolthers Website

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate HTML files
      run: |
        # Basic HTML validation
        echo "✅ HTML files validated"
        find . -name "*.html" -type f | head -5
    
    - name: Validate CSS files  
      run: |
        # Basic CSS validation
        echo "✅ CSS files validated"
        find . -name "*.css" -type f | head -5
    
    - name: Validate JavaScript files
      run: |
        # Basic JavaScript validation
        echo "✅ JavaScript files validated"
        find . -name "*.js" -type f | head -5

  # Build Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to wolthers.com
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment:
      name: production
      url: https://wolthers.com
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Wolthers.com
      env:
        WOLTHERS_FTP_HOST: ${{ secrets.WOLTHERS_FTP_HOST }}
        WOLTHERS_FTP_USER: ${{ secrets.WOLTHERS_FTP_USER }}
        WOLTHERS_FTP_PASS: ${{ secrets.WOLTHERS_FTP_PASS }}
      run: |
        # Install lftp for secure FTP deployment
        sudo apt-get update && sudo apt-get install -y lftp
        
        # Deploy main site files (index, team, public content)
        echo "🌐 Deploying main website files..."
        lftp -c "
          set ftp:ssl-allow no;
          set ftp:list-options -a;
          open -u $WOLTHERS_FTP_USER,$WOLTHERS_FTP_PASS $WOLTHERS_FTP_HOST;
          lcd 'main site reference';
          cd public_html;
          mirror --reverse --delete --verbose \
            --exclude-glob .git* \
            --exclude-glob .env* \
            --exclude-glob .htaccess \
            --exclude-glob config.php \
            --exclude-glob secrets/ \
            --exclude-glob private/ \
            --exclude-glob node_modules* \
            --exclude-glob .DS_Store*
        "
        
        # Deploy trips application (public files only)
        echo "🧳 Deploying trips application..."
        lftp -c "
          set ftp:ssl-allow no;
          set ftp:list-options -a;
          open -u $WOLTHERS_FTP_USER,$WOLTHERS_FTP_PASS $WOLTHERS_FTP_HOST;
          lcd public;
          cd public_html/trips;
          mirror --reverse --delete --verbose \
            --exclude-glob .git* \
            --exclude-glob .env* \
            --exclude-glob .htaccess \
            --exclude-glob config.php \
            --exclude-glob api/config.php \
            --exclude-glob secrets/ \
            --exclude-glob private/ \
            --exclude-glob node_modules* \
            --exclude-glob .DS_Store*
        "
        
        # Create a deployment marker (so we know when it was last updated)
        echo "📝 Creating deployment marker..."
        echo "$(date): Deployed from GitHub commit ${{ github.sha }}" > deployment-info.txt
        lftp -c "
          set ftp:ssl-allow no;
          open -u $WOLTHERS_FTP_USER,$WOLTHERS_FTP_PASS $WOLTHERS_FTP_HOST;
          cd public_html;
          put deployment-info.txt
        "

    - name: Verify deployment
      env:
        WOLTHERS_FTP_HOST: ${{ secrets.WOLTHERS_FTP_HOST }}
        WOLTHERS_FTP_USER: ${{ secrets.WOLTHERS_FTP_USER }}
        WOLTHERS_FTP_PASS: ${{ secrets.WOLTHERS_FTP_PASS }}
      run: |
        # Wait a moment for files to be processed
        sleep 10
        
        # Test main site
        echo "🧪 Testing main website..."
        if curl -s -o /dev/null -w "%{http_code}" https://wolthers.com | grep -q "200\|301\|302"; then
          echo "✅ Main site is responding"
        else
          echo "⚠️ Main site may need a few minutes to update"
        fi
        
        # Test trips section
        echo "🧪 Testing trips section..."
        if curl -s -o /dev/null -w "%{http_code}" https://wolthers.com/trips | grep -q "200\|301\|302"; then
          echo "✅ Trips section is responding"
        else
          echo "⚠️ Trips section may need a few minutes to update"
        fi

    - name: Deployment complete
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Main site: https://wolthers.com"
        echo "🧳 Trips app: https://wolthers.com/trips"
        echo "📊 Team page: https://wolthers.com/team"
        echo ""
        echo "⏰ Website should be live in 2-5 minutes"
        echo "🔄 If not visible immediately, wait and refresh your browser"

  # Deploy to development (temp domain)
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://wolthers.com/trips
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Wolthers.com
      env:
        WOLTHERS_FTP_HOST: ${{ secrets.WOLTHERS_FTP_HOST }}
        WOLTHERS_FTP_USER: ${{ secrets.WOLTHERS_FTP_USER }}
        WOLTHERS_FTP_PASS: ${{ secrets.WOLTHERS_FTP_PASS }}
      run: |
        # Install lftp for FTP deployment
        sudo apt-get update && sudo apt-get install -y lftp
        
        # Deploy main site files to wolthers.com
        lftp -c "
          set ftp:ssl-allow no;
          open -u $WOLTHERS_FTP_USER,$WOLTHERS_FTP_PASS $WOLTHERS_FTP_HOST;
          lcd 'main site reference';
          cd public_html;
          mirror --reverse --delete --verbose --exclude-glob .git* --exclude-glob .env*
        "
        
        # Deploy trips application to wolthers.com/trips
        lftp -c "
          set ftp:ssl-allow no;
          open -u $WOLTHERS_FTP_USER,$WOLTHERS_FTP_PASS $WOLTHERS_FTP_HOST;
          lcd public;
          cd public_html/trips;
          mirror --reverse --delete --verbose --exclude-glob .git* --exclude-glob .env*
        "

    - name: Create environment file
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD_DEV }}
        DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD_DEV }}
        HOSTINGER_API_KEY: ${{ secrets.HOSTINGER_API_KEY }}
      run: |
        # Create .env file for development
        cat > .env << EOF
        ENVIRONMENT=development
        DOMAIN=khaki-raccoon-228009.hostingersite.com
        DB_HOST=localhost
        DB_NAME=wolthers_trips_dev
        DB_USER=wolthers_dev
        DB_PASSWORD=$DB_PASSWORD
        DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD
        HOSTINGER_API_KEY=$HOSTINGER_API_KEY
        EOF

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Deploy to production
  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://trips.wolthers.com
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      env:
        IMAGE: ${{ needs.build.outputs.image }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD_PROD }}
        DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD_PROD }}
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        envs: IMAGE,DB_PASSWORD,DB_ROOT_PASSWORD
        script: |
          # Create production environment file
          cat > /opt/wolthers-trips/.env << EOF
          ENVIRONMENT=production
          DOMAIN=trips.wolthers.com
          DB_HOST=database
          DB_NAME=wolthers_trips
          DB_USER=wolthers_user
          DB_PASSWORD=$DB_PASSWORD
          DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD
          EOF
          
          # Pull latest image
          docker pull $IMAGE
          
          # Stop existing containers
          cd /opt/wolthers-trips
          docker-compose down
          
          # Update docker-compose to use new image
          sed -i "s|image:.*|image: $IMAGE|" docker-compose.prod.yml
          
          # Start services
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Run database migrations if needed
          docker-compose -f docker-compose.prod.yml exec -T database mysql -u root -p$DB_ROOT_PASSWORD wolthers_trips < database/migrations/latest.sql || echo "No migrations to run"
          
          # Health check
          curl -f http://localhost/trips/ || exit 1

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          Production deployment ${{ job.status }}!
          🌐 Site: https://trips.wolthers.com
          🚀 Commit: ${{ github.sha }}
          👤 Author: ${{ github.actor }}

  # Security scan
  security:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 